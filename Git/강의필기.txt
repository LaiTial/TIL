■ local repository에 commit하려면?

- git commit : local repository에 commit
- git status : git 상태 확인, file track상태
- git add [file Name] : 무엇을 commit할지 추가

add로 추가하고 commit해야만 한다. 아니면 commit할 파일이 없음.

■ remote repository에 commit하려면?

- git push : remote repository로 local repository 안에 있는 내용을 올린다.

■ branch 명령어

- git branch : 현재 가지고 있는 branch를 보여준다.
- git branch [branch명] ; 지정한 이름대로 branch를 만든다
- git checkout [branch명] : 지정한 branch명으로 이동

*표시 잇는 branch가 현재 있는 branch다!

■ commit 방법

- git commit -m [메시지] : 지정한 메시지명을 코멘트로 commit

m는 message의 약자다.

■ log 확인

commit 한 후 branch를 옮겨도 수정된 내역이 그대로 남아있다
log or status로 확인.

- git log : commit 로그를 보여준다.

■ branch에 대해

branch는 하나의 저장소라고 볼 수 있다.
여러 사람이 함께 변화 내용을 commit하면서 새 branch를 계속해서 만드는 방식으로 동작. 

새 branch를 만든다고 이전 commit이 사라지는게 아니고 이전 commit한 내용을 그대로 들고 온다.
이전 commit 후 파일이 변화되었지만 commit하지 않았을 경우엔 들고 오지 않는다.
딱 commit한 내용만 들고온다!

■ branch head란?

head가 현재 branch를 가르치는 포인터 즉, 현주소고 head가 변경되면서 현재 내용을 바뀌게 되는것이다.
branch는 변경되지 않고 나의 head가 변경되면서 이전 branch의 내용을 그대로 들고 오게 된다.
local뿐만 아니라 remote reporistory에도 head가 있다.
꼬이면 충돌 나니 조심하자.

■ 새 branch를 만드는 이유

branch를 넘나들면서 새로운 걸 commit하고 현재 파일이 실행되지 않을 시 
이전 branch로 바로 넘어가서 그걸 사용할 수 있기 때문!

새로운 branch를 만든다는 건 분기가 나누어진다고 보면 된다.
이전 branch에서 파일을 변경해도 commit하지 않는다면 그건 적용되지 않는다.
commit한 내용만 가지고 넘어온다 새 branch로.

■ branch와 commit

이전 branch가 1, 2, 3이 있었다 하자.
그럼 그 내용을 가지고 새 branch로 만든후 4, 5, 6을 추가하면 그렇게 따로따로 존재하는것.
이전은 이전 내용 1, 2, 3,이. 새 branch는 그것을 모두 포함하는 1, 2, 3, 4, 5, 6을 모두 가지게 되는것이다. 업데이트처럼!
새 branch를 만들었을때 commit한 내용이 넘어가는 거지 단순 branch 변경은 내용이 넘어오지 않는다.

■ 명령어 찾기

- !v : 가장 최근에 사용한 v로 시작하는 명령어를 위에서 찾아서 실행해주는것

■ 숨김 파일

- .git : 윈도우 숨김&리눅스 숨김
- .파일명 : 윈도우 안 숨김&리눅스 숨김

.git 숨김 폴더가 위치한 곳이 현재 우리가 작업할 디렉토리다.

■ 버전 관리

작업 디렉터리 내 위치한 파일 및 폴더의 현재 상태를 버전으로 만들고, 만들어진 버전을 관리할 수 있다.
버전으로 만든다는 말은 commit을 한다는 말.

버전 관리는 작업 디렉터리, 스테이지, 저장소로 나누어진다.
작업 디렉토리는 .git 이걸 작업 디렉토리 혹은 작업 트리라고 함.

작업 디렉터리 내의 파일을 스테이지로 올리는 명령어가 git add.
스테이지의 파일을 저장소로 보내는 명령어가 git commit

작업 디렉토리 안에 변경 사항이 생기면 새로운 버전을 생성 가능하다.
변경 사항이란 말은 기존의 파일 수정, 혹은 새로운 파일 생성 및 삭제 등 모든 변경을 포함.

이때 모든 변경사항을 모조리 새로운 버전으로 만들어야 하나.

■ .gitignore

이 안에 있는 파일명은 제외하고 올린다는 뜻
파일을 실행할 때 빠른 실행을 위해 메모리에 미리 올려놓은 .catchae 파일 등은 굳이 github에 올리면 부담만 된다.
올릴 필요 x! 그러니 요렇게 설정해서 빼고 올리는것.

종종 버전 관리 대상에서 버전에 포함시키고 싶지 않은 파일이 있을 수 있다. 
그런건 작업 디렉터리에 .gitignore를 만들어서 무시하고 싶은 건 그곳에 넣자.

■ 무시 파일 생성법

생성된 .gitignore 안에 파일을 적은 후 저장하면 이는 git이 작업 디렉터리 내 그 파일을 무시하겠다는 의미다.
.gitignore 파일 안에 있는 txt 파일에 적으면 된다.

- git이 무시할 파일 : e.txt 처럼 파일명 확장자까지.
- 폴더명 : hand/ 이렇게 파일명에다가 /를 꼭 붙여준다. 파일이란 걸 알려주기 위해

■ 태그를 붙여 release하기

단순히 기능 하나 업뎃됬다고 태그를 붙이는 게 아니라 버전이 업그레이드 됬을때 태그를 붙이면 된다.
tag는 현재 버전, commit에 붙인다.

- git tag : 현재 존재하는 태그 목록을 보여줘
- git tag [태그명] : 현재 commit에 태그명을 붙임
- git tag -d [태그명] : 태그명을 삭제
- git tag [태그명] [커밋명] : 이전 commit에 붙이고 싶을 시에 사용

커밋명을 모두 적기 어려우니까 앞의 5자리만 적어주면 된다.

■ commit 되돌리기

git restore을 사용해 commit을 되돌릴 수 있다.
두가지 방법 존재.

■ git reset

- reset : 되돌아간 상태에 대한 걸 완벽히 되돌림.
이전 commit을 모두 삭제.

ex) 1, 2, 3에서 2로 돌아감 -> 3을 삭제하고 걍 1, 2만 존재.

■ git revert

- revert : 버전을 되돌리되, 되돌아간 상태에 대한 새로운 버전, commit을 만듬.
중요한점은 기존의 버전은 삭제되지 않는다는것!

ex) 1, 2, 3,에서 2로 돌아감 -> 2를 복제해서 4를 생성.
